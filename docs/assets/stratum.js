function t(t){return null!=t}function e(e){return t(e)&&"object"==typeof e&&!Array.isArray(e)}function s(e){return t(e)?(Array.isArray(e)?e:[e]).filter((e=>t(e))):[]}function i(t){return t&&"object"==typeof t?Object.getOwnPropertyNames(t).reduce(((e,s)=>(Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s)),e[s]=i(t[s]),e)),Object.create(Object.getPrototypeOf(t))):t}function n(t,s,i){e(s)&&Object.keys(s).forEach((r=>{"string"==typeof s[r]?Object.keys(i).forEach((e=>{"function"==typeof i[e]?s[r]=i[e](t):s[r]=s[r].replace(new RegExp("{{"+e+"}}","g"),i[e])})):e(s[r])&&n(t,s[r],i)}))}function r(t){return JSON.parse(function(t){const e=new WeakSet,s=(t,i)=>{if(null===i||"object"!=typeof i)return i;if(e.has(i))return"[Circular]";e.add(i);const n=Array.isArray(i)?[]:{};for(const[t,e]of Object.entries(i))n[t]=s(t,e);return e.delete(i),n};return JSON.stringify(t,s)}(t))}class a{key;item;injector;_isValid=!1;catalogId;validationErrors=[];eventType;constructor(t,e,s,n){this.key=t,this.item=i(e),this.catalogId=s,this.injector=n,this.eventType=this.item.eventType,this._isValid=this.checkValidity()}get isValid(){return this._isValid}get id(){return this.item.id}checkValidity(){if(!this.item||"object"!=typeof this.item)return this.addValidationError("Catalog item has an unexpected format"),!1;let t=!0;return("number"!=typeof this.id&&"string"!=typeof this.id||"number"==typeof this.id&&this.id<0||"string"==typeof this.id&&!this.id)&&(t=!1,this.addValidationError("An invalid id was provided")),this.injector.isEventIdRegistered(this.catalogId,this.id)&&(t=!1,this.addValidationError(`Duplicate id "${this.id}" in catalog "${this.catalogId}"`)),"string"!=typeof this.item.description&&(t=!1,this.addValidationError("An invalid description was provided")),t}addValidationError(t){this.validationErrors.push(t)}getData(t){const e=i(this.item);return t?.replacements&&n(this,e,t.replacements),e}}class o{publishers;eventTypes;options;context;useGlobalContextPrefix=!0;globalContextPrefix;setContext(t,e){return!(!this.context||!(t in this.context))&&(this.context[t]=e,!0)}getContext(t){return this.context[t]}onRegister(t){}}class l{pluginName;acceptedEventModels;onInitialize(t){}shouldPublishEvent(t){return!Array.isArray(this.acceptedEventModels)||this.acceptedEventModels.some((e=>t instanceof e))}}const c="stm_internal_id",d="stratumdb",u="stratum_global";class h{injector;id;metadata;isValid=!0;errors={};validModels={};constructor(t,e,s){if(this.injector=s,this.id=t,this.metadata={catalogVersion:e.catalogVersion??"",componentName:e.componentName??s.productName,componentVersion:e.componentVersion??s.productVersion},this.addItems(e.items),!this.isValid){const t=Object.keys(this.errors),e=t.length;s.logger.debug(`${e} invalid items were removed when registering catalog "${this.id}": ${t.join(", ")}`)}}addItems(t){let e=!0;for(const[s,i]of Object.entries(t)){const t=[];if(s in this.validModels)t.push("Duplicate key");else{const e=this.getEventModel(s,i);"string"==typeof e?t.push(e):e.isValid?(this.validModels[s]=e,this.injector.registerEventId(this.id,e.id)):t.push(...e.validationErrors)}t.length&&(e=!1,s in this.errors?this.errors[s].errors.push(...t):this.errors[s]={errors:t})}return this.isValid=this.isValid&&e,e}getEventModel(t,e){const s=e?.eventType;return s&&s in this.injector.eventTypeModelMap?new this.injector.eventTypeModelMap[s].model(t,e,this.id,this.injector):`Event type "${s}" not found.`}}function g(e,s,i){return function(e,s,i){try{return t(i)||(i=globalThis),t(i[e])||(i[e]={}),Array.isArray(i[e].listeners)||(i[e].listeners=[]),i[e].listeners.push(s),!0}catch{return!1}}(`stratum_config_${e}`,s,i)}class p{debug(...t){(function(){try{return"true"===sessionStorage.getItem(d)?.toLowerCase()}catch{return!1}})()&&console.debug("[Stratum]",...t)}}function b(){try{return crypto.randomUUID()}catch{return"00000000-0000-0000-0000-000000000000"}}class m{static n=1;static _generateUniqueKey(){return"t"+m.n++}_tests={};createTest(t){return{id:m._generateUniqueKey(),data:t}}startAbTest(t){const e=this.createTest(t);return this._tests[e.id]=e,e}endAbTest(t){f(t)&&(t=t.id),delete this._tests[t]}endAllAbTests(){Object.keys(this._tests).forEach((t=>{delete this._tests[t]}))}get tests(){return Object.values(this._tests)}generateContexts(e){let s=Object.values(this._tests);t(e)&&(Array.isArray(e)?s=s.concat(...e):s.push(e));const i=[];return s.forEach((t=>{f(t)||(t=this.createTest(t)),i.push(t.data)})),i}}function f(e){return t(e)&&void 0!==e.data&&void 0!==e.id}class y{version="1.1.0";eventTypeModelMap={base:{model:a}};logger;abTestManager=new m;plugins={};stratumSessionId;registeredEventIds={};productName;productVersion;constructor(e,s){this.productName=e,this.productVersion=s,this.logger=new p,this.stratumSessionId=function(){let e="";try{const s=sessionStorage.getItem(c);t(s)?e=s:(e=b(),sessionStorage.setItem(c,e))}catch{e=b()}return e}()}registerEventId(t,e){t in this.registeredEventIds||(this.registeredEventIds[t]={}),this.registeredEventIds[t][e]=!0}isEventIdRegistered(t,e){return!!this.registeredEventIds[t]&&e in this.registeredEventIds[t]}registerPlugin(t){const e=[],i=[];if(!t.name||t.name in this.plugins)return this.logger.debug(`Unable to register plugin: duplicate name "${t.name}"`),{publishers:e};if(this.plugins[t.name]=t,t.eventTypes)for(const[e,s]of Object.entries(t.eventTypes))e in this.eventTypeModelMap?this.logger.debug(`Unable to register plugin eventType: duplicate name "${e}"`):(this.eventTypeModelMap[e]={pluginName:t.name,model:s},i.push(s));return s(t.publishers).forEach((s=>{Array.isArray(s.acceptedEventModels)||(s.acceptedEventModels=i),s.pluginName=t.name,e.push(s)})),{publishers:e}}getExternalSnapshotListeners(){const t=globalThis,e=`stratum_config_${this.productName}`;return[...Array.isArray(t[u]?.listeners)?t[u].listeners:[],...Array.isArray(t[e]?.listeners)?t[e].listeners:[]]}}class v extends l{name="newRelic";modelKeyMap={id:null,eventType:null,description:null};shouldPublishEvent(){return!0}async isAvailable(){return!!this.publisher}get publisher(){if("undefined"!=typeof window)return window.newrelic}getDefaultInteraction(t){this.publisher.interaction().end();const e=this.publisher.interaction().setAttribute("componentName",t.catalog.metadata.componentName).setAttribute("componentVersion",t.catalog.metadata.componentVersion).setAttribute("catalogEventType",t.event.eventType).setAttribute("catalogId",t.catalog.id).setAttribute("catalogVersion",t.catalog.metadata.catalogVersion).setAttribute("stratumSessionId",t.stratumSessionId).setAttribute("productName",t.productName).setAttribute("productVersion",t.productVersion).setAttribute("stratumLibraryVersion",t.stratumVersion).setAttribute("stratumEventId",String(t.event.id));return t.abTestSchemas.length&&e.setAttribute("abTests",t.abTestSchemas),this.setPluginContextData(e,t),e}setPluginContextData(e,s){Object.values(s.globalContext).forEach((s=>{Object.keys(s).forEach((i=>{t(s[i])&&e.setAttribute(i,s[i])}))}))}getEventOutput(t,e){return e.data}async publish(e,s){const i=this.getDefaultInteraction(s),n=t(s?.eventOptions?.data?.isValid)?!!s?.eventOptions?.data?.isValid:void 0;i.setAttribute("isValid",n),Object.keys(e).forEach((s=>{!(s in this.modelKeyMap)&&t(e[s])&&("name"===s?i.setName(e[s]):i.setAttribute(s,e[s]))})),i.save().end()}}const j=new class extends o{name="newRelic";publishers=[new v]},E={VIEW_LISTING:"VIEW_LISTING",VIEW_POST:"VIEW_POST"},T={[E.VIEW_LISTING]:{description:"View the list of blog posts",eventType:"base",id:1},[E.VIEW_POST]:{description:"View a specific blog post",eventType:"base",id:2,blogPostId:"{{pageId}}"}},V=new class{catalogs={};defaultCatalog;publishers=[];injector;constructor(t){if(this.injector=new y(t.productName,t.productVersion),t.plugins&&this.addPlugin(t.plugins),t.catalog){const e=this.addCatalog(t.catalog);e&&(this.defaultCatalog=this.catalogs[e])}}addCatalog(t){const e=function(t,e,s){return`${t.componentName||e}:${t.catalogVersion||t.componentVersion||s}`}(t,this.injector.productName,this.injector.productVersion);return this.catalogs[e]?(this.injector.logger.debug(`Unable to register duplicate catalog "${e}"`),""):(this.catalogs[e]=new h(e,t,this.injector),e)}removeCatalog(t){t in this.catalogs&&(delete this.catalogs[t],delete this.injector.registeredEventIds[t]),this.defaultCatalog&&this.defaultCatalog.id===t&&delete this.defaultCatalog}addPlugin(t){s(t).forEach((t=>{const{publishers:e}=this.injector.registerPlugin(t);e.forEach((t=>{t.onInitialize(this.injector),this.publishers.push(t)})),t.onRegister(this.injector)}))}async publish(t,e){const s=this.defaultCatalog?.id??"";return this.publishFromCatalog(s,t,e)}async publishFromCatalog(e,s,i){const n=this.catalogs[e];if(!n||!n.validModels[s])return this.injector.logger.debug(`Unable to publish "${s}": key not found or invalid`),Promise.resolve(!1);const a=n.validModels[s],o=this.publishers.filter((t=>t.shouldPublishEvent(a))),l=function(t,e,s,i,n){const a={};i.forEach((e=>{if(e.pluginName&&e.pluginName in t.plugins){const s=t.plugins[e.pluginName];a[e.pluginName]={context:s.context??{},options:s.options??{}}}}));const o={};return Object.keys(t.plugins).forEach((e=>{const s=t.plugins[e];if("object"==typeof s.context){let t=s.context;if(s.useGlobalContextPrefix){const i=s.globalContextPrefix??e;t=Object.keys(t).reduce(((e,s)=>(e[`${i}_${s}`]=t[s],e)),{})}o[e]=t}})),r({abTestSchemas:t.abTestManager.generateContexts(n?.abTestSchemas),catalog:{metadata:s.metadata,id:s.id},stratumSessionId:t.stratumSessionId,data:e.getData(n),globalContext:o,plugins:a,productName:t.productName,productVersion:t.productVersion,stratumVersion:t.version,event:{eventType:e.eventType,id:e.id},eventOptions:n})}(this.injector,a,n,o,i),c=this.injector.getExternalSnapshotListeners();return c.length&&queueMicrotask((()=>{c.forEach((t=>{t(l)}))})),o.length?Promise.all(o.map((e=>new Promise(((n,o)=>{queueMicrotask((async()=>{const c=r(l);c.eventOptions=function(e,s){const i=Object.assign({},s??{});return e.pluginName&&t(i.pluginData)&&e.pluginName in i.pluginData&&(i.data=i.pluginData[e.pluginName]),delete i.pluginData,i}(e,i);if(await e.isAvailable(a,c)){const t=e.getEventOutput(a,c);await e.publish(t,c),n()}else this.injector.logger.debug(`Unable to publish "${s}": Publisher "${e.name}" is not available`),o()}))}))))).then((()=>!0)).catch((()=>!1)):Promise.resolve(!0)}addSnapshotListener(t){return g(this.id,t)}get id(){return this.injector.productName}get abTests(){return this.injector.abTestManager.tests}startAbTest(t){return this.injector.abTestManager.startAbTest(t)}endAbTest(t){this.injector.abTestManager.endAbTest(t)}endAllAbTests(){this.injector.abTestManager.endAllAbTests()}get stratumSessionId(){return this.injector.stratumSessionId}get version(){return this.injector.version}}({catalog:{items:T},productName:"stratum-observability-ghpages",productVersion:"1",plugins:[j]});export{j as NewRelicPlugin,E as TagKey,V as stratumService};
